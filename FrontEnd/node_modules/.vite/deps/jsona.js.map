{
  "version": 3,
  "sources": ["../../jsona/src/utils.ts", "../../tslib/tslib.es6.mjs", "../../jsona/src/builders/ModelsSerializer.ts", "../../jsona/src/builders/JsonDeserializer.ts", "../../jsona/src/builders/ReduxObjectDenormalizer.ts", "../../jsona/src/simplePropertyMappers.ts", "../../jsona/src/cache.ts", "../../jsona/src/Jsona.ts", "../../jsona/src/switchCasePropertyMappers.ts", "../../jsona/src/index.ts"],
  "sourcesContent": ["import {\n    TJsonaIncludeNamesChain,\n    TJsonaNormalizedIncludeNamesTree\n} from './JsonaTypes';\n\nexport function createIncludeNamesTree(\n    namesChain: TJsonaIncludeNamesChain,\n    includeTree: TJsonaNormalizedIncludeNamesTree,\n): void {\n    const namesArray = namesChain.split('.');\n    const currentIncludeName = namesArray.shift();\n    const chainHasMoreNames = namesArray.length;\n\n    let subTree = null;\n\n    if (chainHasMoreNames) {\n        subTree = includeTree[currentIncludeName] || {};\n        createIncludeNamesTree(namesArray.join('.'), subTree);\n    }\n\n    includeTree[currentIncludeName] = subTree;\n}\n\nexport function jsonParse(stringified: string): Object {\n    let parsed;\n\n    try {\n        parsed = JSON.parse(stringified);\n    } catch (e) {\n        parsed = {};\n        console.warn(e);\n    }\n\n    return parsed;\n}\n\n// https://github.com/30-seconds/30-seconds-of-code/blob/master/snippets/isPlainObject.md\nexport const isPlainObject = (val: unknown): val is Object => !!val && typeof val === 'object' && val.constructor === Object;", "/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n", "import {\n    TJsonaModel,\n    TJsonApiBody,\n    TJsonApiData,\n    TJsonaDenormalizedIncludeNames,\n    TJsonaNormalizedIncludeNamesTree,\n    TJsonaUniqueIncluded,\n    IModelPropertiesMapper,\n    IModelsSerializer,\n} from '../JsonaTypes';\n\nimport {createIncludeNamesTree} from '../utils';\n\nexport class ModelsSerializer implements IModelsSerializer {\n\n    protected propertiesMapper: IModelPropertiesMapper;\n    protected stuff: TJsonaModel | Array<TJsonaModel>;\n    protected includeNamesTree: TJsonaNormalizedIncludeNamesTree;\n    private buildIncludedIndex: number;\n\n    constructor(propertiesMapper?: IModelPropertiesMapper) {\n        propertiesMapper && this.setPropertiesMapper(propertiesMapper);\n        this.buildIncludedIndex = 0;\n    }\n\n    setPropertiesMapper(propertiesMapper: IModelPropertiesMapper) {\n        this.propertiesMapper = propertiesMapper;\n    }\n\n    setStuff(stuff: TJsonaModel | TJsonaModel[]) {\n        this.stuff = stuff;\n    }\n\n    setIncludeNames(includeNames: TJsonaDenormalizedIncludeNames | TJsonaNormalizedIncludeNamesTree) {\n        if (Array.isArray(includeNames)) {\n            const includeNamesTree = {};\n            includeNames.forEach((namesChain) => {\n                createIncludeNamesTree(namesChain, includeNamesTree);\n            });\n            this.includeNamesTree = includeNamesTree;\n        } else {\n            this.includeNamesTree = includeNames;\n        }\n    }\n\n    build(): TJsonApiBody {\n        const {stuff, propertiesMapper} = this;\n\n        if (!propertiesMapper || typeof propertiesMapper !== 'object') {\n            throw new Error('ModelsSerializer cannot build, propertiesMapper is not set');\n        } else if (!stuff || typeof stuff !== 'object') {\n            throw new Error('ModelsSerializer cannot build, stuff is not set');\n        }\n\n        const body: TJsonApiBody = {};\n        const uniqueIncluded: TJsonaUniqueIncluded = {};\n\n        if (stuff && Array.isArray(stuff)) {\n            const collectionLength = stuff.length;\n            const data = [];\n\n            for (let i = 0; i < collectionLength; i++) {\n                data.push(\n                  this.buildDataByModel(stuff[i])\n                );\n\n                this.buildIncludedByModel(\n                  stuff[i],\n                  this.includeNamesTree,\n                  uniqueIncluded\n                );\n            }\n\n            body['data'] = data;\n\n        } else if (stuff) {\n            body['data'] = this.buildDataByModel(stuff);\n\n            this.buildIncludedByModel(\n              stuff,\n              this.includeNamesTree,\n              uniqueIncluded\n            );\n        } else if (stuff === null) {\n            body['data'] = null;\n        }\n\n        if (Object.keys(uniqueIncluded).length) {\n            body['included'] = Object.values(uniqueIncluded);\n        }\n\n        return body;\n    }\n\n    buildDataByModel(model: TJsonaModel | null): TJsonApiData {\n        const id = this.propertiesMapper.getId(model);\n        const type = this.propertiesMapper.getType(model);\n        const attributes = this.propertiesMapper.getAttributes(model);\n        const data = { type,\n            ...(typeof id !== 'undefined' ? { id } : {}),\n            ...(typeof attributes !== 'undefined' ? { attributes } : {}),\n        };\n\n        if (typeof data.type !== 'string' || !data.type) {\n            console.warn('ModelsSerializer cannot buildDataByModel, type is not set or incorrect', model);\n            throw new Error('ModelsSerializer cannot buildDataByModel, type is not set or incorrect');\n        }\n\n        const relationships = this.buildRelationshipsByModel(model);\n\n        if (relationships && Object.keys(relationships).length) {\n            data['relationships'] = relationships;\n        }\n\n        return data;\n    }\n\n    buildResourceObjectPart(relation: TJsonaModel) {\n        const id = this.propertiesMapper.getId(relation);\n        const type = this.propertiesMapper.getType(relation);\n\n        return {\n            type,\n            ...(typeof id === 'undefined' ? {} : { id }),\n        };\n    }\n\n    buildRelationshipsByModel(model: TJsonaModel) {\n        const relations = this.propertiesMapper.getRelationships(model);\n\n        if (!relations || !Object.keys(relations).length) {\n            return;\n        }\n\n        const relationships = {};\n\n        Object.keys(relations).forEach((k) => {\n            const relation = relations[k];\n\n            if (Array.isArray(relation)) {\n                const relationshipData = [];\n\n                for (const relationItem of relation) {\n                    const relationshipDataItem = this.buildResourceObjectPart(relationItem);\n\n                    if ('type' in relationshipDataItem) {\n                        relationshipData.push(relationshipDataItem);\n                    } else {\n                        console.error(\n                          `Can't create data item for relationship ${k},\n                            it doesn't have 'id' or 'type', it was skipped`,\n                          relationItem\n                        );\n                    }\n                }\n\n                relationships[k] = {\n                    data: relationshipData\n                };\n            } else if (relation) {\n                const item = this.buildResourceObjectPart(relation);\n\n                if ('type' in item) {\n                    relationships[k] = {\n                        data: item\n                    };\n                } else {\n                    console.error(\n                      `Can't create data for relationship ${k}, it doesn't have 'type', it was skipped`,\n                      relation\n                    );\n                }\n            } else {\n                relationships[k] = {\n                    data: relation\n                };\n            }\n        });\n\n        return relationships;\n    }\n\n    buildIncludedByModel(\n      model: TJsonaModel,\n      includeTree: TJsonaNormalizedIncludeNamesTree,\n      builtIncluded: TJsonaUniqueIncluded = {}\n    ): void {\n        if (!includeTree || !Object.keys(includeTree).length) {\n            return;\n        }\n\n        const modelRelationships = this.propertiesMapper.getRelationships(model);\n        if (!modelRelationships || !Object.keys(modelRelationships).length) {\n            return;\n        }\n\n        const includeNames = Object.keys(includeTree);\n        const includeNamesLength = includeNames.length;\n\n        for (let i = 0; i < includeNamesLength; i++) {\n            const currentRelationName = includeNames[i];\n            const relation: TJsonaModel | Array<TJsonaModel> = modelRelationships[currentRelationName];\n\n            if (relation) {\n                if (Array.isArray(relation)) {\n                    let relationModelsLength = relation.length;\n\n                    for (let r = 0; r < relationModelsLength; r++) {\n                        const relationModel: TJsonaModel = relation[r];\n                        this.buildIncludedItem(relationModel, includeTree[currentRelationName], builtIncluded);\n                    }\n                } else {\n                    this.buildIncludedItem(relation, includeTree[currentRelationName], builtIncluded);\n                }\n            }\n        }\n    }\n\n    buildIncludedItem(\n      relationModel: TJsonaModel,\n      subIncludeTree: TJsonaNormalizedIncludeNamesTree,\n      builtIncluded: TJsonaUniqueIncluded\n    ) {\n        const id = this.propertiesMapper.getId(relationModel);\n        const type = this.propertiesMapper.getType(relationModel);\n        let includeKey = type + id;\n\n        if (!id || !builtIncluded[includeKey]) {\n            // create data by current entity if such included is not yet created\n            if (includeKey in builtIncluded) {\n                includeKey += this.buildIncludedIndex;\n                this.buildIncludedIndex += 1;\n            }\n            builtIncluded[includeKey] = this.buildDataByModel(relationModel);\n\n            if (subIncludeTree) {\n                this.buildIncludedByModel(relationModel, subIncludeTree, builtIncluded);\n            }\n        }\n    }\n\n}\n\nexport default ModelsSerializer;", "import {\n    IJsonPropertiesMapper,\n    TJsonaModel,\n    TJsonaRelationships,\n    TJsonApiBody,\n    TJsonApiData,\n    IJsonaDeserializer,\n    IDeserializeCache,\n    TResourceIdObj,\n} from '../JsonaTypes';\n\nexport class JsonDeserializer implements IJsonaDeserializer {\n\n    protected pm: IJsonPropertiesMapper;\n    protected dc: IDeserializeCache;\n    protected body;\n    protected dataInObject;\n    protected preferNestedDataFromData = false;\n    protected includedInObject;\n\n    constructor(propertiesMapper, deserializeCache, options) {\n        this.setPropertiesMapper(propertiesMapper);\n        this.setDeserializeCache(deserializeCache);\n\n        if (!options) {\n            return;\n        }\n\n        if (options.preferNestedDataFromData) {\n            this.preferNestedDataFromData = true;\n        }\n    }\n\n    setDeserializeCache(dc): void {\n        this.dc = dc;\n    }\n\n    setPropertiesMapper(pm): void {\n        this.pm = pm;\n    }\n\n    setJsonParsedObject(body: TJsonApiBody): void {\n        this.body = body;\n    }\n\n    build(): TJsonaModel | Array<TJsonaModel> {\n        const {data} = this.body;\n        let stuff;\n\n        if (Array.isArray(data)) {\n            stuff = [];\n            const collectionLength = data.length;\n\n            for (let i = 0; i < collectionLength; i++) {\n                if (data[i]) {\n                    const model = this.buildModelByData(data[i]);\n\n                    if (model) {\n                        stuff.push(model);\n                    }\n                }\n            }\n        } else if (data) {\n            stuff = this.buildModelByData(data);\n        }\n\n        return stuff;\n    }\n\n    buildModelByData(data: TJsonApiData, resourceIdObj?: TResourceIdObj): TJsonaModel {\n        const cachedModel = this.dc.getCachedModel(data, resourceIdObj);\n\n        if (cachedModel) {\n            return cachedModel;\n        }\n\n        const model = this.pm.createModel(data.type);\n\n        this.dc.handleModel(model, data, resourceIdObj); // should be called before this.pm.setRelationships(model, relationships);\n\n        if (model) {\n            this.pm.setId(model, data.id);\n\n            if (data.attributes) {\n                this.pm.setAttributes(model, data.attributes);\n            }\n\n            if (data.meta && this.pm.setMeta) {\n                this.pm.setMeta(model, data.meta);\n            }\n\n            if (data.links && this.pm.setLinks) {\n                this.pm.setLinks(model, data.links);\n            }\n\n            if (resourceIdObj?.meta) {\n                this.pm.setResourceIdObjMeta(model, resourceIdObj.meta);\n            }\n\n            const relationships: null | TJsonaRelationships = this.buildRelationsByData(data, model);\n\n            if (relationships) {\n                this.pm.setRelationships(model, relationships);\n            }\n        }\n\n        return model;\n    }\n\n    buildRelationsByData(data: TJsonApiData, model: TJsonaModel): TJsonaRelationships | null {\n        const readyRelations = {};\n\n        if (data.relationships) {\n            for (let k in data.relationships) {\n                const relation = data.relationships[k];\n\n                if (Array.isArray(relation.data)) {\n                    readyRelations[k] = [];\n\n                    const relationDataLength = relation.data.length;\n                    let resourceIdObj;\n\n                    for (let i = 0; i < relationDataLength; i++) {\n                        resourceIdObj = relation.data[i];\n\n                        if (!resourceIdObj) {\n                            continue;\n                        }\n\n                        let dataItem = this.buildDataFromIncludedOrData(\n                            resourceIdObj.id,\n                            resourceIdObj.type\n                        );\n                        readyRelations[k].push(\n                            this.buildModelByData(dataItem, resourceIdObj)\n                        );\n                    }\n                } else if (relation.data) {\n                    let dataItem = this.buildDataFromIncludedOrData(relation.data.id, relation.data.type);\n                    readyRelations[k] = this.buildModelByData(dataItem, relation.data);\n                } else if (relation.data === null) {\n                    readyRelations[k] = null;\n                }\n\n                if (relation.links) {\n                    const {setRelationshipLinks} = this.pm;\n                    if (setRelationshipLinks) {\n                        setRelationshipLinks(model, k, relation.links);\n                    }\n                }\n\n                if (relation.meta) {\n                    const {setRelationshipMeta} = this.pm;\n                    if (setRelationshipMeta) {\n                        setRelationshipMeta(model, k, relation.meta);\n                    }\n                }\n            }\n        }\n\n        if (Object.keys(readyRelations).length) {\n            return <TJsonaRelationships> readyRelations;\n        }\n\n        return null;\n    }\n\n    buildDataFromIncludedOrData(id: string | number, type: string): TJsonApiData {\n\n        if (this.preferNestedDataFromData) {\n            const dataObject = this.buildDataInObject();\n            const dataItemFromData = dataObject[type + id];\n\n            if (dataItemFromData) {\n                return dataItemFromData;\n            }\n        }\n\n        const includedObject = this.buildIncludedInObject();\n        const dataItemFromIncluded = includedObject[type + id];\n\n        if (dataItemFromIncluded) {\n            return dataItemFromIncluded;\n        }\n\n        if (!this.preferNestedDataFromData) {\n            const dataObject = this.buildDataInObject();\n            const dataItemFromData = dataObject[type + id];\n\n            if (dataItemFromData) {\n                return dataItemFromData;\n            }\n        }\n\n        return { id: id, type: type };\n    }\n\n    buildDataInObject(): { [key: string]: TJsonApiData } {\n        if (!this.dataInObject) {\n            this.dataInObject = {};\n\n            const { data } = this.body;\n            const dataLength = data.length;\n\n            if (data && dataLength) {\n                for (let i = 0; i < dataLength; i++) {\n                    let item = data[i];\n                    this.dataInObject[item.type + item.id] = item;\n                }\n            } else if (data) {\n                this.dataInObject[data.type + data.id] = data;\n            }\n        }\n\n        return this.dataInObject;\n    }\n\n    buildIncludedInObject(): { [key: string]: TJsonApiData } {\n        if (!this.includedInObject) {\n            this.includedInObject = {};\n\n            if (this.body.included) {\n                let includedLength = this.body.included.length;\n                for (let i = 0; i < includedLength; i++) {\n                    let item = this.body.included[i];\n                    this.includedInObject[item.type + item.id] = item;\n                }\n            }\n        }\n\n        return this.includedInObject;\n    }\n\n}\n\nexport default JsonDeserializer;", "import {\n    IJsonaModelBuilder,\n    IJsonPropertiesMapper,\n    TJsonaModel,\n    TJsonaRelationships,\n    TReduxObject,\n    TReduxObjectModel,\n    TJsonApiRelationships,\n    TJsonApiRelationshipData\n} from '../JsonaTypes';\n\nclass ReduxObjectDenormalizer implements IJsonaModelBuilder {\n\n    protected propertiesMapper: IJsonPropertiesMapper;\n    protected reduxObject: TReduxObject;\n    protected entityType: string;\n    protected ids?: string | Array<string>;\n    protected returnBuilderInRelations: boolean;\n    protected cachedModels = {};\n\n    constructor(propertiesMapper) {\n        this.setPropertiesMapper(propertiesMapper);\n    }\n\n    setPropertiesMapper(propertiesMapper: IJsonPropertiesMapper) {\n        this.propertiesMapper = propertiesMapper;\n    }\n\n    setReduxObject(reduxObject: TReduxObject) {\n        this.reduxObject = reduxObject;\n    }\n    setEntityType(entityType: string) {\n        this.entityType = entityType;\n    }\n\n    setEntityIds(ids: string | Array<string>) {\n        this.ids = ids;\n    }\n\n    setReturnBuilderInRelations(returnBuilderInRelations: boolean) {\n        this.returnBuilderInRelations = returnBuilderInRelations;\n    }\n\n    build(): null | TJsonaModel | Array<TJsonaModel> {\n        const {reduxObject, entityType, propertiesMapper} = this;\n\n        if (!propertiesMapper || typeof propertiesMapper !== 'object') {\n            throw new Error('ReduxObjectDenormalizer cannot build, propertiesMapper is not set');\n        } else if (!reduxObject || typeof reduxObject !== 'object') {\n            throw new Error('ReduxObjectDenormalizer cannot build, reduxObject is not set');\n        } else if (!entityType) {\n            throw new Error('ReduxObjectDenormalizer cannot build, entityType is not set');\n        }\n\n        if (!reduxObject[entityType]) {\n            return null;\n        }\n\n        let {ids} = this;\n\n        if (!ids) {\n            ids = Object.keys(reduxObject[entityType]);\n        }\n\n        if (Array.isArray(ids)) {\n\n            if (!ids.length) {\n                return null;\n            }\n\n            const models = [];\n\n            ids.forEach((id) => {\n                const model = this.buildModel(entityType, id);\n                if (model) {\n                    models.push(model);\n                }\n            });\n\n            return models;\n        }\n\n        return this.buildModel(entityType, ids);\n    }\n\n    buildModel(type: string, id: string | number): null | TJsonaModel {\n        const {reduxObject} = this;\n\n        if (!reduxObject[type]) {\n            return null;\n        }\n\n        const reduxObjectModel: TReduxObjectModel = reduxObject[type][id];\n\n        if (!reduxObjectModel) {\n            return null;\n        }\n\n        // checks for built model in cachedModels is a protection from creating models on recursive relationships\n        const entityKey = `${type}-${id}`;\n        let model = this.cachedModels[entityKey];\n\n        if (!model) {\n            model = this.propertiesMapper.createModel(type);\n\n            if (model) {\n                this.cachedModels[entityKey] = model;\n\n                this.propertiesMapper.setId(model, reduxObjectModel.id);\n\n                if (reduxObjectModel.attributes) {\n                    this.propertiesMapper.setAttributes(model, reduxObjectModel.attributes);\n                }\n\n                const relationships = this.buildRelationships(model, reduxObjectModel.relationships);\n\n                if (relationships) {\n                    this.propertiesMapper.setRelationships(model, relationships)\n                }\n            }\n        }\n\n        return model;\n    }\n\n    buildRelationships(model: TJsonaModel, reduxObjectRelationships: TJsonApiRelationships): null | TJsonaRelationships {\n\n        if (!reduxObjectRelationships) {\n            return null;\n        }\n        const relationNames = Object.keys(reduxObjectRelationships);\n\n        if (!relationNames.length) {\n            return null;\n        }\n\n        const relations = {};\n\n        relationNames.forEach((relationName) => {\n            const relation = reduxObjectRelationships[relationName];\n\n            if (relation && relation.data) {\n                if (this.returnBuilderInRelations) {\n                    relations[relationName] = this.buildRelationModels.bind(this, relation.data);\n                } else {\n                    relations[relationName] = this.buildRelationModels(relation.data);\n                }\n            }\n\n            if (relation && relation.links) {\n                this.propertiesMapper.setRelationshipLinks(model, relationName, relation.links);\n            }\n\n            if (relation && relation.meta) {\n                const {setRelationshipMeta} = this.propertiesMapper;\n                if (setRelationshipMeta) { // support was added in patch release\n                    setRelationshipMeta(model, relationName, relation.meta);\n                }\n            }\n        });\n\n        return Object.keys(relations).length ? relations : null;\n    }\n\n    buildRelationModels(\n        data: TJsonApiRelationshipData | Array<TJsonApiRelationshipData>\n    ): null | TJsonaModel | Array<TJsonaModel> {\n\n        if (Array.isArray(data)) {\n            const relationModels = [];\n\n            data.forEach((dataItem) => {\n                const model = this.buildModel(dataItem.type, dataItem.id);\n                relationModels.push(model || dataItem);\n            });\n\n            return relationModels;\n        } else if (data.id && data.type) {\n            return this.buildModel(data.type, data.id) || data;\n        }\n\n        return null;\n    }\n}\n\nexport default ReduxObjectDenormalizer;\n", "import {\n    IModelPropertiesMapper,\n    IJsonPropertiesMapper,\n    TAnyKeyValueObject,\n    TJsonaModel,\n    TJsonaRelationships, TJsonaRelationshipBuild, TJsonApiLinks, TResourceIdObj\n} from './JsonaTypes';\n\nexport const RELATIONSHIP_NAMES_PROP = 'relationshipNames';\n\nexport class ModelPropertiesMapper implements IModelPropertiesMapper {\n\n    getId(model: TJsonaModel) {\n        return model.id;\n    }\n\n    getType(model: TJsonaModel) {\n        return model.type;\n    }\n\n    getAttributes(model: TJsonaModel) {\n        let exceptProps = ['id', 'type', RELATIONSHIP_NAMES_PROP];\n\n        if (Array.isArray(model[RELATIONSHIP_NAMES_PROP])) {\n\n            exceptProps.push(...model[RELATIONSHIP_NAMES_PROP]);\n\n        } else if (model[RELATIONSHIP_NAMES_PROP]) {\n            console.warn(\n                `Can't getAttributes correctly, '${RELATIONSHIP_NAMES_PROP}' property of ${model.type}-${model.id} model\n                isn't array of relationship names`,\n                model[RELATIONSHIP_NAMES_PROP]\n            );\n        }\n\n        const attributes = {};\n        Object.keys(model).forEach((attrName) => {\n            if (exceptProps.indexOf(attrName) === -1) {\n                attributes[attrName] = model[attrName];\n            }\n        });\n\n        return attributes;\n    }\n\n    getRelationships(model: TJsonaModel) {\n        const relationshipNames = model[RELATIONSHIP_NAMES_PROP];\n\n        if (!relationshipNames || Array.isArray(relationshipNames) && !relationshipNames.length) {\n            return;\n        } else if (relationshipNames && !Array.isArray(relationshipNames)) {\n            console.warn(\n                `Can't getRelationships correctly,\n                '${RELATIONSHIP_NAMES_PROP}' property of ${model.type}-${model.id} model\n                isn't array of relationship names`,\n                model[RELATIONSHIP_NAMES_PROP]\n            );\n            return;\n        }\n\n        const relationships = {};\n        relationshipNames.forEach((relationName) => {\n            if (model[relationName] !== undefined) {\n                relationships[relationName] = model[relationName];\n            }\n        });\n        return relationships;\n    }\n}\n\nexport function defineRelationGetter(\n    model,\n    relationName,\n    buildRelation: TJsonaRelationshipBuild\n) {\n    Object.defineProperty(\n        model,\n        relationName,\n        {\n            enumerable: true,\n            configurable: true,\n            set: (value) => {\n                delete model[relationName];\n                model[relationName] = value;\n            },\n            get: () => {\n                delete model[relationName];\n                return model[relationName] = buildRelation();\n            },\n        },\n    );\n}\n\nexport class JsonPropertiesMapper implements IJsonPropertiesMapper {\n\n    createModel(type: string): TJsonaModel {\n        return {type};\n    }\n\n    setId(model: TJsonaModel, id: string | number) {\n        model.id = id;\n    }\n\n    setAttributes(model: TJsonaModel, attributes: TAnyKeyValueObject) {\n        Object.keys(attributes).forEach((propName) => {\n            model[propName] = attributes[propName];\n        });\n    }\n\n    setMeta(model: TJsonaModel, meta: TAnyKeyValueObject) {\n        model.meta = meta;\n    }\n\n    setLinks(model: TJsonaModel, links: TJsonApiLinks) {\n        model.links = links;\n    }\n\n    setResourceIdObjMeta(model: TJsonaModel, meta: TResourceIdObj) {\n        model.resourceIdObjMeta = meta;\n    }\n\n    setRelationships(model: TJsonaModel, relationships: TJsonaRelationships) {\n\n        Object.keys(relationships).forEach((propName) => {\n            if (typeof relationships[propName] === 'function') {\n                defineRelationGetter(model, propName, <TJsonaRelationshipBuild> relationships[propName]);\n            } else {\n                model[propName] = relationships[propName];\n            }\n        });\n\n        const newNames = Object.keys(relationships);\n        const currentNames = model[RELATIONSHIP_NAMES_PROP];\n\n        if (currentNames && currentNames.length) {\n            model[RELATIONSHIP_NAMES_PROP] = [...currentNames, ...newNames].filter((value, i, self) => self.indexOf(value) === i);\n        } else {\n            model[RELATIONSHIP_NAMES_PROP] = newNames;\n        }\n    }\n\n    setRelationshipLinks(parentModel: TJsonaModel, relationName: string, links: TJsonApiLinks) {\n        // inherit your IJsonPropertiesMapper and overload this method, if you want to handle relationship links\n    }\n\n    setRelationshipMeta(parentModel: TJsonaModel, relationName: string, links: TAnyKeyValueObject) {\n        // inherit your IJsonPropertiesMapper and overload this method, if you want to handle relationship meta\n    }\n}\n", "import {\n    IDeserializeCache, TAnyKeyValueObject, TJsonaModel, TJsonApiData, TResourceIdObj\n} from './JsonaTypes';\n\n\nexport function jsonStringify(json: TAnyKeyValueObject): string {\n    let stringified;\n\n    try {\n        stringified = JSON.stringify(json);\n    } catch (e) {\n        stringified = '';\n        console.warn(e);\n    }\n\n    return stringified;\n}\n\nexport class DeserializeCache implements IDeserializeCache {\n\n    protected cachedModels = {};\n\n    getCachedModel(data:TJsonApiData, resourceIdObject: TResourceIdObj) {\n        const entityKey = this.createCacheKey(data, resourceIdObject);\n        return this.cachedModels[entityKey] || null;\n    }\n\n    handleModel(model: TJsonaModel, data: TJsonApiData, resourceIdObject: TResourceIdObj) {\n        const entityKey = this.createCacheKey(data, resourceIdObject);\n        const dataWithPayload = data.attributes || data.relationships;\n\n        if (entityKey && dataWithPayload) {\n            this.cachedModels[entityKey] = model;\n        }\n    }\n\n    createCacheKey(data, resourceIdObject?: TResourceIdObj) {\n        // resourceIdObject.meta sets to model in simplePropertyMappers.ts, so it should be used here too\n        // cache in this case probably will be redundant\n        if (!data.id || !data.type) {\n            return;\n        }\n\n        let resourcePart = resourceIdObject ? `${resourceIdObject.type}-${resourceIdObject.id}` : '';\n\n        if (resourceIdObject?.meta) {\n            resourcePart += `-${jsonStringify(resourceIdObject.meta)}`;\n        }\n\n        if (data.meta) {\n            return `${data.type}-${data.id}-${jsonStringify(data.meta)}-${resourcePart}`;\n        }\n\n        return `${data.type}-${data.id}-${resourcePart}`;\n    }\n\n}\n", "import {\n    IModelPropertiesMapper,\n    IModelsSerializerConstructor,\n    IJsonDeserializerConstructor,\n    IJsonPropertiesMapper,\n    TJsonaDenormalizedIncludeNames,\n    TJsonaNormalizedIncludeNamesTree,\n    TJsonaModel,\n    TJsonApiBody,\n    TReduxObject,\n    IDeserializeCacheConstructor,\n    TDeserializeOptions\n} from './JsonaTypes';\n\nimport {jsonParse} from './utils';\nimport ModelsSerializer from './builders/ModelsSerializer';\nimport JsonDeserializer from './builders/JsonDeserializer';\nimport ReduxObjectDenormalizer from './builders/ReduxObjectDenormalizer';\n\nimport {\n    ModelPropertiesMapper,\n    JsonPropertiesMapper\n} from './simplePropertyMappers';\n\nimport { DeserializeCache } from './cache';\n\nclass Jsona {\n\n    public modelPropertiesMapper: IModelPropertiesMapper = new ModelPropertiesMapper();\n    public jsonPropertiesMapper: IJsonPropertiesMapper = new JsonPropertiesMapper();\n    public DeserializeCache: IDeserializeCacheConstructor = DeserializeCache;\n    public ModelsSerializer: IModelsSerializerConstructor = ModelsSerializer;\n    public JsonDeserializer: IJsonDeserializerConstructor = JsonDeserializer;\n\n    constructor(params?: {\n        modelPropertiesMapper?: IModelPropertiesMapper,\n        jsonPropertiesMapper?: IJsonPropertiesMapper,\n        DeserializeCache?: IDeserializeCacheConstructor,\n        ModelsSerializer?: IModelsSerializerConstructor,\n        JsonDeserializer?: IJsonDeserializerConstructor,\n    }) {\n        if (params && params.modelPropertiesMapper) {\n            this.modelPropertiesMapper = params.modelPropertiesMapper;\n        }\n        if (params && params.jsonPropertiesMapper) {\n            this.jsonPropertiesMapper = params.jsonPropertiesMapper;\n        }\n        if (params && params.DeserializeCache) {\n            this.DeserializeCache = params.DeserializeCache;\n        }\n        if (params && params.ModelsSerializer) {\n            this.ModelsSerializer = params.ModelsSerializer;\n        }\n        if (params && params.JsonDeserializer) {\n            this.JsonDeserializer = params.JsonDeserializer;\n        }\n    }\n\n    /**\n     * serialize\n     * Creates JSON, compatible with json:api specification from Jsona model(s).\n     */\n    serialize({\n                  stuff, includeNames}: {\n            stuff: TJsonaModel | Array<TJsonaModel>,\n            includeNames?: TJsonaDenormalizedIncludeNames | TJsonaNormalizedIncludeNamesTree\n        }\n    ): TJsonApiBody {\n        if (!stuff) {\n            throw new Error('Jsona can not serialize, stuff is not passed');\n        }\n\n        const jsonBuilder = new this.ModelsSerializer(this.modelPropertiesMapper);\n\n        jsonBuilder.setStuff(stuff);\n\n        if (includeNames) {\n            jsonBuilder.setIncludeNames(includeNames);\n        }\n\n        return jsonBuilder.build();\n    }\n\n    /**\n     * deserialize\n     * Creates Jsona model(s) from JSON, compatible with json:api specification.\n     */\n    deserialize(body: TJsonApiBody | string, options?: TDeserializeOptions): TJsonaModel | Array<TJsonaModel> {\n        if (!body) {\n            throw new Error('Jsona can not deserialize, body is not passed');\n        }\n\n        const deserializeCache = new this.DeserializeCache();\n        const modelBuilder = new this.JsonDeserializer(this.jsonPropertiesMapper, deserializeCache, options);\n\n        if (typeof body === 'string') {\n            modelBuilder.setJsonParsedObject(jsonParse(body));\n        } else {\n            modelBuilder.setJsonParsedObject(body);\n        }\n\n        return modelBuilder.build();\n    }\n\n    /**\n     * denormalizeReduxObject\n     * Creates Jsona model(s) from ReduxObject, that creates by json-api-normalizer\n     * https://github.com/yury-dymov/json-api-normalizer\n     *\n     */\n    denormalizeReduxObject(\n        {reduxObject, entityType, entityIds, returnBuilderInRelations = false}: {\n            reduxObject: TReduxObject,\n            entityType: string,\n            entityIds?: string | Array<string>,\n            returnBuilderInRelations?: boolean,\n        }\n    ): null | TJsonaModel | Array<TJsonaModel> {\n\n        if (!reduxObject) {\n            throw new Error('Jsona can not denormalize ReduxObject, incorrect reduxObject passed');\n        }\n        if (!entityType) {\n            throw new Error('Jsona can not denormalize ReduxObject, entityType is not passed');\n        }\n\n        if (!reduxObject[entityType]) {\n            return null;\n        }\n\n        const modelBuilder = new ReduxObjectDenormalizer(this.jsonPropertiesMapper);\n\n        modelBuilder.setReduxObject(reduxObject);\n        modelBuilder.setEntityType(entityType);\n        modelBuilder.setReturnBuilderInRelations(returnBuilderInRelations);\n\n        if (entityIds) {\n            modelBuilder.setEntityIds(\n                Array.isArray(entityIds) ? entityIds : entityIds.toString()\n            );\n        }\n\n        return modelBuilder.build();\n    }\n\n}\n\nexport default Jsona;\n", "import {\n    IModelPropertiesMapper,\n    IJsonPropertiesMapper,\n    TAnyKeyValueObject,\n    TJsonaModel, TJsonaRelationships,\n    SwitchCaseModelMapperOptionsType,\n    SwitchCaseJsonMapperOptionsType,\n} from './JsonaTypes';\nimport {\n    ModelPropertiesMapper, \n    JsonPropertiesMapper,\n    RELATIONSHIP_NAMES_PROP,\n} from './simplePropertyMappers';\nimport {\n    isPlainObject\n} from './utils';\n\nexport class SwitchCaseModelMapper extends ModelPropertiesMapper implements IModelPropertiesMapper {\n\n    switchAttributes: boolean;\n    switchRelationships: boolean;\n    switchType: boolean;\n    switchChar: string;\n    regex: RegExp;\n\n    constructor(options?: SwitchCaseModelMapperOptionsType) {\n        super();\n\n        const {\n            switchAttributes = true,\n            switchRelationships = true,\n            switchType = true,\n            switchChar = '-',\n        } = options || {};\n\n        this.switchAttributes = switchAttributes;\n        this.switchRelationships = switchRelationships;\n        this.switchType = switchType;\n        this.switchChar = switchChar;\n        this.regex = new RegExp(/([a-z][A-Z0-9])/g);\n    }\n\n    getType(model: TJsonaModel) {\n        const type = super.getType(model);\n\n        if (!this.switchType || !type) {\n            return type;\n        }\n\n        return this.convertFromCamelCaseString(type);\n    }\n\n    getAttributes(model: TJsonaModel) {\n        const camelCasedAttributes = super.getAttributes(model);\n\n        if (!this.switchAttributes || !camelCasedAttributes) {\n            return camelCasedAttributes;\n        }\n\n        return this.convertFromCamelCase(camelCasedAttributes);\n    }\n\n    getRelationships(model: TJsonaModel) {\n        const camelCasedRelationships = super.getRelationships(model);\n\n        if (!this.switchRelationships || !camelCasedRelationships) {\n            return camelCasedRelationships;\n        }\n\n        return this.convertFromCamelCase(camelCasedRelationships);\n    }\n\n    private convertFromCamelCase(stuff: unknown) {\n        if (Array.isArray(stuff)) {\n            return stuff.map(item => this.convertFromCamelCase(item));\n        }\n        \n        if(isPlainObject(stuff)) {\n            const converted = {};\n            Object.entries(stuff).forEach(([propName, value]) => {\n                const kebabName = this.convertFromCamelCaseString(propName);\n                converted[kebabName] = this.convertFromCamelCase(value);\n            })\n            return converted;\n        }\n\n        return stuff;\n    }\n\n    private convertFromCamelCaseString(camelCaseString: string) {\n        return camelCaseString.replace(this.regex, g => g[0] + this.switchChar + g[1].toLowerCase());\n    }\n}\n\nexport class SwitchCaseJsonMapper extends JsonPropertiesMapper implements IJsonPropertiesMapper {\n\n    camelizeAttributes: boolean;\n    camelizeRelationships: boolean;\n    camelizeType: boolean;\n    camelizeMeta: boolean;\n    switchChar: string;\n    regex: RegExp;\n\n    constructor(options?: SwitchCaseJsonMapperOptionsType) {\n        super();\n\n        const {\n            camelizeAttributes = true,\n            camelizeRelationships = true,\n            camelizeType = true,\n            camelizeMeta = false,\n            switchChar = '-'\n        } = options || {};\n\n        this.camelizeAttributes = camelizeAttributes;\n        this.camelizeRelationships = camelizeRelationships;\n        this.camelizeType = camelizeType;\n        this.camelizeMeta = camelizeMeta;\n        this.switchChar = switchChar;\n        this.regex = new RegExp(`${this.switchChar}([a-z0-9])`, 'g');\n    }\n\n    createModel(type: string): TJsonaModel {\n        if (!this.camelizeType) {\n            return {type};\n        }\n\n        const camelizedType = this.convertToCamelCaseString(type);\n        return {type: camelizedType};\n    }\n\n    setAttributes(model: TJsonaModel, attributes: TAnyKeyValueObject) {\n        if (!this.camelizeAttributes) {\n            return super.setAttributes(model, attributes);\n        }\n\n        Object.assign(model, this.convertToCamelCase(attributes));\n    }\n\n    setMeta(model: TJsonaModel, meta: TAnyKeyValueObject) {\n        if (!this.camelizeMeta) {\n            return super.setMeta(model, meta);\n        }\n\n        model.meta = this.convertToCamelCase(meta);\n    }\n\n    setRelationships(model: TJsonaModel, relationships: TJsonaRelationships) {\n        // call super.setRelationships first, just for not to copy paste setRelationships logic\n        super.setRelationships(model, relationships);\n\n        if (!this.camelizeRelationships) {\n            return;\n        }\n\n        // then change relationship names case if needed\n        model[RELATIONSHIP_NAMES_PROP].forEach((kebabName, i) => {\n            const camelName = this.convertToCamelCaseString(kebabName);\n            if (camelName !== kebabName) {\n                model[camelName] = model[kebabName];\n                delete model[kebabName];\n                model[RELATIONSHIP_NAMES_PROP][i] = camelName;\n            }\n        });\n    }\n\n    private convertToCamelCase(stuff: unknown) {\n        if (Array.isArray(stuff)) {\n            return stuff.map(item => this.convertToCamelCase(item));\n        }\n        \n        if(isPlainObject(stuff)) {\n            const converted = {};\n            Object.entries(stuff).forEach(([propName, value]) => {\n                const camelName = this.convertToCamelCaseString(propName);\n                converted[camelName] = this.convertToCamelCase(value);\n            });\n            return converted;\n        }\n\n        return stuff;\n    }\n\n    convertToCamelCaseString(notCamelCaseString: string) {\n        return notCamelCaseString.replace(this.regex, g => g[1].toUpperCase());\n    }\n}\n", "import Jsona from './Jsona';\nimport ModelsSerializer from './builders/ModelsSerializer';\nimport JsonDeserializer from './builders/JsonDeserializer';\nimport {ModelPropertiesMapper, JsonPropertiesMapper} from './simplePropertyMappers';\nimport {SwitchCaseModelMapper, SwitchCaseJsonMapper} from './switchCasePropertyMappers';\n\nexport {\n    Jsona,\n    ModelsSerializer,\n    JsonDeserializer,\n    ModelPropertiesMapper,\n    JsonPropertiesMapper,\n    SwitchCaseModelMapper,\n    SwitchCaseJsonMapper,\n};\n\nexport default Jsona;\n"],
  "mappings": "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",
  "names": ["v", "d", "b", "__assign", "ModelsSerializer", "JsonDeserializer", "ReduxObjectDenormalizer", "ModelPropertiesMapper", "JsonPropertiesMapper", "DeserializeCache", "Jsona", "SwitchCaseModelMapper", "SwitchCaseJsonMapper"]
}
