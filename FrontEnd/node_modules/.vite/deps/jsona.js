import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-GFT2G5UO.js";

// node_modules/jsona/lib/utils.js
var require_utils = __commonJS({
  "node_modules/jsona/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPlainObject = exports.jsonParse = exports.createIncludeNamesTree = void 0;
    function createIncludeNamesTree(namesChain, includeTree) {
      var namesArray = namesChain.split(".");
      var currentIncludeName = namesArray.shift();
      var chainHasMoreNames = namesArray.length;
      var subTree = null;
      if (chainHasMoreNames) {
        subTree = includeTree[currentIncludeName] || {};
        createIncludeNamesTree(namesArray.join("."), subTree);
      }
      includeTree[currentIncludeName] = subTree;
    }
    exports.createIncludeNamesTree = createIncludeNamesTree;
    function jsonParse(stringified) {
      var parsed;
      try {
        parsed = JSON.parse(stringified);
      } catch (e) {
        parsed = {};
        console.warn(e);
      }
      return parsed;
    }
    exports.jsonParse = jsonParse;
    var isPlainObject = function(val) {
      return !!val && typeof val === "object" && val.constructor === Object;
    };
    exports.isPlainObject = isPlainObject;
  }
});

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f)
        i[n] = f(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async)
        inner = dispose;
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    if (inner)
      dispose = function() {
        try {
          inner.call(this);
        } catch (e) {
          return Promise.reject(e);
        }
      };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/jsona/lib/builders/ModelsSerializer.js
var require_ModelsSerializer = __commonJS({
  "node_modules/jsona/lib/builders/ModelsSerializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModelsSerializer = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var utils_1 = require_utils();
    var ModelsSerializer = function() {
      function ModelsSerializer2(propertiesMapper) {
        propertiesMapper && this.setPropertiesMapper(propertiesMapper);
        this.buildIncludedIndex = 0;
      }
      ModelsSerializer2.prototype.setPropertiesMapper = function(propertiesMapper) {
        this.propertiesMapper = propertiesMapper;
      };
      ModelsSerializer2.prototype.setStuff = function(stuff) {
        this.stuff = stuff;
      };
      ModelsSerializer2.prototype.setIncludeNames = function(includeNames) {
        if (Array.isArray(includeNames)) {
          var includeNamesTree_1 = {};
          includeNames.forEach(function(namesChain) {
            (0, utils_1.createIncludeNamesTree)(namesChain, includeNamesTree_1);
          });
          this.includeNamesTree = includeNamesTree_1;
        } else {
          this.includeNamesTree = includeNames;
        }
      };
      ModelsSerializer2.prototype.build = function() {
        var _a = this, stuff = _a.stuff, propertiesMapper = _a.propertiesMapper;
        if (!propertiesMapper || typeof propertiesMapper !== "object") {
          throw new Error("ModelsSerializer cannot build, propertiesMapper is not set");
        } else if (!stuff || typeof stuff !== "object") {
          throw new Error("ModelsSerializer cannot build, stuff is not set");
        }
        var body = {};
        var uniqueIncluded = {};
        if (stuff && Array.isArray(stuff)) {
          var collectionLength = stuff.length;
          var data = [];
          for (var i = 0; i < collectionLength; i++) {
            data.push(this.buildDataByModel(stuff[i]));
            this.buildIncludedByModel(stuff[i], this.includeNamesTree, uniqueIncluded);
          }
          body["data"] = data;
        } else if (stuff) {
          body["data"] = this.buildDataByModel(stuff);
          this.buildIncludedByModel(stuff, this.includeNamesTree, uniqueIncluded);
        } else if (stuff === null) {
          body["data"] = null;
        }
        if (Object.keys(uniqueIncluded).length) {
          body["included"] = Object.values(uniqueIncluded);
        }
        return body;
      };
      ModelsSerializer2.prototype.buildDataByModel = function(model) {
        var id = this.propertiesMapper.getId(model);
        var type = this.propertiesMapper.getType(model);
        var attributes = this.propertiesMapper.getAttributes(model);
        var data = tslib_1.__assign(tslib_1.__assign({ type }, typeof id !== "undefined" ? { id } : {}), typeof attributes !== "undefined" ? { attributes } : {});
        if (typeof data.type !== "string" || !data.type) {
          console.warn("ModelsSerializer cannot buildDataByModel, type is not set or incorrect", model);
          throw new Error("ModelsSerializer cannot buildDataByModel, type is not set or incorrect");
        }
        var relationships = this.buildRelationshipsByModel(model);
        if (relationships && Object.keys(relationships).length) {
          data["relationships"] = relationships;
        }
        return data;
      };
      ModelsSerializer2.prototype.buildResourceObjectPart = function(relation) {
        var id = this.propertiesMapper.getId(relation);
        var type = this.propertiesMapper.getType(relation);
        return tslib_1.__assign({ type }, typeof id === "undefined" ? {} : { id });
      };
      ModelsSerializer2.prototype.buildRelationshipsByModel = function(model) {
        var _this = this;
        var relations = this.propertiesMapper.getRelationships(model);
        if (!relations || !Object.keys(relations).length) {
          return;
        }
        var relationships = {};
        Object.keys(relations).forEach(function(k) {
          var relation = relations[k];
          if (Array.isArray(relation)) {
            var relationshipData = [];
            for (var _i = 0, relation_1 = relation; _i < relation_1.length; _i++) {
              var relationItem = relation_1[_i];
              var relationshipDataItem = _this.buildResourceObjectPart(relationItem);
              if ("type" in relationshipDataItem) {
                relationshipData.push(relationshipDataItem);
              } else {
                console.error("Can't create data item for relationship ".concat(k, ",\n                            it doesn't have 'id' or 'type', it was skipped"), relationItem);
              }
            }
            relationships[k] = {
              data: relationshipData
            };
          } else if (relation) {
            var item = _this.buildResourceObjectPart(relation);
            if ("type" in item) {
              relationships[k] = {
                data: item
              };
            } else {
              console.error("Can't create data for relationship ".concat(k, ", it doesn't have 'type', it was skipped"), relation);
            }
          } else {
            relationships[k] = {
              data: relation
            };
          }
        });
        return relationships;
      };
      ModelsSerializer2.prototype.buildIncludedByModel = function(model, includeTree, builtIncluded) {
        if (builtIncluded === void 0) {
          builtIncluded = {};
        }
        if (!includeTree || !Object.keys(includeTree).length) {
          return;
        }
        var modelRelationships = this.propertiesMapper.getRelationships(model);
        if (!modelRelationships || !Object.keys(modelRelationships).length) {
          return;
        }
        var includeNames = Object.keys(includeTree);
        var includeNamesLength = includeNames.length;
        for (var i = 0; i < includeNamesLength; i++) {
          var currentRelationName = includeNames[i];
          var relation = modelRelationships[currentRelationName];
          if (relation) {
            if (Array.isArray(relation)) {
              var relationModelsLength = relation.length;
              for (var r = 0; r < relationModelsLength; r++) {
                var relationModel = relation[r];
                this.buildIncludedItem(relationModel, includeTree[currentRelationName], builtIncluded);
              }
            } else {
              this.buildIncludedItem(relation, includeTree[currentRelationName], builtIncluded);
            }
          }
        }
      };
      ModelsSerializer2.prototype.buildIncludedItem = function(relationModel, subIncludeTree, builtIncluded) {
        var id = this.propertiesMapper.getId(relationModel);
        var type = this.propertiesMapper.getType(relationModel);
        var includeKey = type + id;
        if (!id || !builtIncluded[includeKey]) {
          if (includeKey in builtIncluded) {
            includeKey += this.buildIncludedIndex;
            this.buildIncludedIndex += 1;
          }
          builtIncluded[includeKey] = this.buildDataByModel(relationModel);
          if (subIncludeTree) {
            this.buildIncludedByModel(relationModel, subIncludeTree, builtIncluded);
          }
        }
      };
      return ModelsSerializer2;
    }();
    exports.ModelsSerializer = ModelsSerializer;
    exports.default = ModelsSerializer;
  }
});

// node_modules/jsona/lib/builders/JsonDeserializer.js
var require_JsonDeserializer = __commonJS({
  "node_modules/jsona/lib/builders/JsonDeserializer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonDeserializer = void 0;
    var JsonDeserializer = function() {
      function JsonDeserializer2(propertiesMapper, deserializeCache, options) {
        this.preferNestedDataFromData = false;
        this.setPropertiesMapper(propertiesMapper);
        this.setDeserializeCache(deserializeCache);
        if (!options) {
          return;
        }
        if (options.preferNestedDataFromData) {
          this.preferNestedDataFromData = true;
        }
      }
      JsonDeserializer2.prototype.setDeserializeCache = function(dc) {
        this.dc = dc;
      };
      JsonDeserializer2.prototype.setPropertiesMapper = function(pm) {
        this.pm = pm;
      };
      JsonDeserializer2.prototype.setJsonParsedObject = function(body) {
        this.body = body;
      };
      JsonDeserializer2.prototype.build = function() {
        var data = this.body.data;
        var stuff;
        if (Array.isArray(data)) {
          stuff = [];
          var collectionLength = data.length;
          for (var i = 0; i < collectionLength; i++) {
            if (data[i]) {
              var model = this.buildModelByData(data[i]);
              if (model) {
                stuff.push(model);
              }
            }
          }
        } else if (data) {
          stuff = this.buildModelByData(data);
        }
        return stuff;
      };
      JsonDeserializer2.prototype.buildModelByData = function(data, resourceIdObj) {
        var cachedModel = this.dc.getCachedModel(data, resourceIdObj);
        if (cachedModel) {
          return cachedModel;
        }
        var model = this.pm.createModel(data.type);
        this.dc.handleModel(model, data, resourceIdObj);
        if (model) {
          this.pm.setId(model, data.id);
          if (data.attributes) {
            this.pm.setAttributes(model, data.attributes);
          }
          if (data.meta && this.pm.setMeta) {
            this.pm.setMeta(model, data.meta);
          }
          if (data.links && this.pm.setLinks) {
            this.pm.setLinks(model, data.links);
          }
          if (resourceIdObj === null || resourceIdObj === void 0 ? void 0 : resourceIdObj.meta) {
            this.pm.setResourceIdObjMeta(model, resourceIdObj.meta);
          }
          var relationships = this.buildRelationsByData(data, model);
          if (relationships) {
            this.pm.setRelationships(model, relationships);
          }
        }
        return model;
      };
      JsonDeserializer2.prototype.buildRelationsByData = function(data, model) {
        var readyRelations = {};
        if (data.relationships) {
          for (var k in data.relationships) {
            var relation = data.relationships[k];
            if (Array.isArray(relation.data)) {
              readyRelations[k] = [];
              var relationDataLength = relation.data.length;
              var resourceIdObj = void 0;
              for (var i = 0; i < relationDataLength; i++) {
                resourceIdObj = relation.data[i];
                if (!resourceIdObj) {
                  continue;
                }
                var dataItem = this.buildDataFromIncludedOrData(resourceIdObj.id, resourceIdObj.type);
                readyRelations[k].push(this.buildModelByData(dataItem, resourceIdObj));
              }
            } else if (relation.data) {
              var dataItem = this.buildDataFromIncludedOrData(relation.data.id, relation.data.type);
              readyRelations[k] = this.buildModelByData(dataItem, relation.data);
            } else if (relation.data === null) {
              readyRelations[k] = null;
            }
            if (relation.links) {
              var setRelationshipLinks = this.pm.setRelationshipLinks;
              if (setRelationshipLinks) {
                setRelationshipLinks(model, k, relation.links);
              }
            }
            if (relation.meta) {
              var setRelationshipMeta = this.pm.setRelationshipMeta;
              if (setRelationshipMeta) {
                setRelationshipMeta(model, k, relation.meta);
              }
            }
          }
        }
        if (Object.keys(readyRelations).length) {
          return readyRelations;
        }
        return null;
      };
      JsonDeserializer2.prototype.buildDataFromIncludedOrData = function(id, type) {
        if (this.preferNestedDataFromData) {
          var dataObject = this.buildDataInObject();
          var dataItemFromData = dataObject[type + id];
          if (dataItemFromData) {
            return dataItemFromData;
          }
        }
        var includedObject = this.buildIncludedInObject();
        var dataItemFromIncluded = includedObject[type + id];
        if (dataItemFromIncluded) {
          return dataItemFromIncluded;
        }
        if (!this.preferNestedDataFromData) {
          var dataObject = this.buildDataInObject();
          var dataItemFromData = dataObject[type + id];
          if (dataItemFromData) {
            return dataItemFromData;
          }
        }
        return { id, type };
      };
      JsonDeserializer2.prototype.buildDataInObject = function() {
        if (!this.dataInObject) {
          this.dataInObject = {};
          var data = this.body.data;
          var dataLength = data.length;
          if (data && dataLength) {
            for (var i = 0; i < dataLength; i++) {
              var item = data[i];
              this.dataInObject[item.type + item.id] = item;
            }
          } else if (data) {
            this.dataInObject[data.type + data.id] = data;
          }
        }
        return this.dataInObject;
      };
      JsonDeserializer2.prototype.buildIncludedInObject = function() {
        if (!this.includedInObject) {
          this.includedInObject = {};
          if (this.body.included) {
            var includedLength = this.body.included.length;
            for (var i = 0; i < includedLength; i++) {
              var item = this.body.included[i];
              this.includedInObject[item.type + item.id] = item;
            }
          }
        }
        return this.includedInObject;
      };
      return JsonDeserializer2;
    }();
    exports.JsonDeserializer = JsonDeserializer;
    exports.default = JsonDeserializer;
  }
});

// node_modules/jsona/lib/builders/ReduxObjectDenormalizer.js
var require_ReduxObjectDenormalizer = __commonJS({
  "node_modules/jsona/lib/builders/ReduxObjectDenormalizer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ReduxObjectDenormalizer = function() {
      function ReduxObjectDenormalizer2(propertiesMapper) {
        this.cachedModels = {};
        this.setPropertiesMapper(propertiesMapper);
      }
      ReduxObjectDenormalizer2.prototype.setPropertiesMapper = function(propertiesMapper) {
        this.propertiesMapper = propertiesMapper;
      };
      ReduxObjectDenormalizer2.prototype.setReduxObject = function(reduxObject) {
        this.reduxObject = reduxObject;
      };
      ReduxObjectDenormalizer2.prototype.setEntityType = function(entityType) {
        this.entityType = entityType;
      };
      ReduxObjectDenormalizer2.prototype.setEntityIds = function(ids) {
        this.ids = ids;
      };
      ReduxObjectDenormalizer2.prototype.setReturnBuilderInRelations = function(returnBuilderInRelations) {
        this.returnBuilderInRelations = returnBuilderInRelations;
      };
      ReduxObjectDenormalizer2.prototype.build = function() {
        var _this = this;
        var _a = this, reduxObject = _a.reduxObject, entityType = _a.entityType, propertiesMapper = _a.propertiesMapper;
        if (!propertiesMapper || typeof propertiesMapper !== "object") {
          throw new Error("ReduxObjectDenormalizer cannot build, propertiesMapper is not set");
        } else if (!reduxObject || typeof reduxObject !== "object") {
          throw new Error("ReduxObjectDenormalizer cannot build, reduxObject is not set");
        } else if (!entityType) {
          throw new Error("ReduxObjectDenormalizer cannot build, entityType is not set");
        }
        if (!reduxObject[entityType]) {
          return null;
        }
        var ids = this.ids;
        if (!ids) {
          ids = Object.keys(reduxObject[entityType]);
        }
        if (Array.isArray(ids)) {
          if (!ids.length) {
            return null;
          }
          var models_1 = [];
          ids.forEach(function(id) {
            var model = _this.buildModel(entityType, id);
            if (model) {
              models_1.push(model);
            }
          });
          return models_1;
        }
        return this.buildModel(entityType, ids);
      };
      ReduxObjectDenormalizer2.prototype.buildModel = function(type, id) {
        var reduxObject = this.reduxObject;
        if (!reduxObject[type]) {
          return null;
        }
        var reduxObjectModel = reduxObject[type][id];
        if (!reduxObjectModel) {
          return null;
        }
        var entityKey = "".concat(type, "-").concat(id);
        var model = this.cachedModels[entityKey];
        if (!model) {
          model = this.propertiesMapper.createModel(type);
          if (model) {
            this.cachedModels[entityKey] = model;
            this.propertiesMapper.setId(model, reduxObjectModel.id);
            if (reduxObjectModel.attributes) {
              this.propertiesMapper.setAttributes(model, reduxObjectModel.attributes);
            }
            var relationships = this.buildRelationships(model, reduxObjectModel.relationships);
            if (relationships) {
              this.propertiesMapper.setRelationships(model, relationships);
            }
          }
        }
        return model;
      };
      ReduxObjectDenormalizer2.prototype.buildRelationships = function(model, reduxObjectRelationships) {
        var _this = this;
        if (!reduxObjectRelationships) {
          return null;
        }
        var relationNames = Object.keys(reduxObjectRelationships);
        if (!relationNames.length) {
          return null;
        }
        var relations = {};
        relationNames.forEach(function(relationName) {
          var relation = reduxObjectRelationships[relationName];
          if (relation && relation.data) {
            if (_this.returnBuilderInRelations) {
              relations[relationName] = _this.buildRelationModels.bind(_this, relation.data);
            } else {
              relations[relationName] = _this.buildRelationModels(relation.data);
            }
          }
          if (relation && relation.links) {
            _this.propertiesMapper.setRelationshipLinks(model, relationName, relation.links);
          }
          if (relation && relation.meta) {
            var setRelationshipMeta = _this.propertiesMapper.setRelationshipMeta;
            if (setRelationshipMeta) {
              setRelationshipMeta(model, relationName, relation.meta);
            }
          }
        });
        return Object.keys(relations).length ? relations : null;
      };
      ReduxObjectDenormalizer2.prototype.buildRelationModels = function(data) {
        var _this = this;
        if (Array.isArray(data)) {
          var relationModels_1 = [];
          data.forEach(function(dataItem) {
            var model = _this.buildModel(dataItem.type, dataItem.id);
            relationModels_1.push(model || dataItem);
          });
          return relationModels_1;
        } else if (data.id && data.type) {
          return this.buildModel(data.type, data.id) || data;
        }
        return null;
      };
      return ReduxObjectDenormalizer2;
    }();
    exports.default = ReduxObjectDenormalizer;
  }
});

// node_modules/jsona/lib/simplePropertyMappers.js
var require_simplePropertyMappers = __commonJS({
  "node_modules/jsona/lib/simplePropertyMappers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonPropertiesMapper = exports.defineRelationGetter = exports.ModelPropertiesMapper = exports.RELATIONSHIP_NAMES_PROP = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports.RELATIONSHIP_NAMES_PROP = "relationshipNames";
    var ModelPropertiesMapper = function() {
      function ModelPropertiesMapper2() {
      }
      ModelPropertiesMapper2.prototype.getId = function(model) {
        return model.id;
      };
      ModelPropertiesMapper2.prototype.getType = function(model) {
        return model.type;
      };
      ModelPropertiesMapper2.prototype.getAttributes = function(model) {
        var exceptProps = ["id", "type", exports.RELATIONSHIP_NAMES_PROP];
        if (Array.isArray(model[exports.RELATIONSHIP_NAMES_PROP])) {
          exceptProps.push.apply(exceptProps, model[exports.RELATIONSHIP_NAMES_PROP]);
        } else if (model[exports.RELATIONSHIP_NAMES_PROP]) {
          console.warn("Can't getAttributes correctly, '".concat(exports.RELATIONSHIP_NAMES_PROP, "' property of ").concat(model.type, "-").concat(model.id, " model\n                isn't array of relationship names"), model[exports.RELATIONSHIP_NAMES_PROP]);
        }
        var attributes = {};
        Object.keys(model).forEach(function(attrName) {
          if (exceptProps.indexOf(attrName) === -1) {
            attributes[attrName] = model[attrName];
          }
        });
        return attributes;
      };
      ModelPropertiesMapper2.prototype.getRelationships = function(model) {
        var relationshipNames = model[exports.RELATIONSHIP_NAMES_PROP];
        if (!relationshipNames || Array.isArray(relationshipNames) && !relationshipNames.length) {
          return;
        } else if (relationshipNames && !Array.isArray(relationshipNames)) {
          console.warn("Can't getRelationships correctly,\n                '".concat(exports.RELATIONSHIP_NAMES_PROP, "' property of ").concat(model.type, "-").concat(model.id, " model\n                isn't array of relationship names"), model[exports.RELATIONSHIP_NAMES_PROP]);
          return;
        }
        var relationships = {};
        relationshipNames.forEach(function(relationName) {
          if (model[relationName] !== void 0) {
            relationships[relationName] = model[relationName];
          }
        });
        return relationships;
      };
      return ModelPropertiesMapper2;
    }();
    exports.ModelPropertiesMapper = ModelPropertiesMapper;
    function defineRelationGetter(model, relationName, buildRelation) {
      Object.defineProperty(model, relationName, {
        enumerable: true,
        configurable: true,
        set: function(value) {
          delete model[relationName];
          model[relationName] = value;
        },
        get: function() {
          delete model[relationName];
          return model[relationName] = buildRelation();
        }
      });
    }
    exports.defineRelationGetter = defineRelationGetter;
    var JsonPropertiesMapper = function() {
      function JsonPropertiesMapper2() {
      }
      JsonPropertiesMapper2.prototype.createModel = function(type) {
        return { type };
      };
      JsonPropertiesMapper2.prototype.setId = function(model, id) {
        model.id = id;
      };
      JsonPropertiesMapper2.prototype.setAttributes = function(model, attributes) {
        Object.keys(attributes).forEach(function(propName) {
          model[propName] = attributes[propName];
        });
      };
      JsonPropertiesMapper2.prototype.setMeta = function(model, meta) {
        model.meta = meta;
      };
      JsonPropertiesMapper2.prototype.setLinks = function(model, links) {
        model.links = links;
      };
      JsonPropertiesMapper2.prototype.setResourceIdObjMeta = function(model, meta) {
        model.resourceIdObjMeta = meta;
      };
      JsonPropertiesMapper2.prototype.setRelationships = function(model, relationships) {
        Object.keys(relationships).forEach(function(propName) {
          if (typeof relationships[propName] === "function") {
            defineRelationGetter(model, propName, relationships[propName]);
          } else {
            model[propName] = relationships[propName];
          }
        });
        var newNames = Object.keys(relationships);
        var currentNames = model[exports.RELATIONSHIP_NAMES_PROP];
        if (currentNames && currentNames.length) {
          model[exports.RELATIONSHIP_NAMES_PROP] = tslib_1.__spreadArray(tslib_1.__spreadArray([], currentNames, true), newNames, true).filter(function(value, i, self) {
            return self.indexOf(value) === i;
          });
        } else {
          model[exports.RELATIONSHIP_NAMES_PROP] = newNames;
        }
      };
      JsonPropertiesMapper2.prototype.setRelationshipLinks = function(parentModel, relationName, links) {
      };
      JsonPropertiesMapper2.prototype.setRelationshipMeta = function(parentModel, relationName, links) {
      };
      return JsonPropertiesMapper2;
    }();
    exports.JsonPropertiesMapper = JsonPropertiesMapper;
  }
});

// node_modules/jsona/lib/cache.js
var require_cache = __commonJS({
  "node_modules/jsona/lib/cache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeserializeCache = exports.jsonStringify = void 0;
    function jsonStringify(json) {
      var stringified;
      try {
        stringified = JSON.stringify(json);
      } catch (e) {
        stringified = "";
        console.warn(e);
      }
      return stringified;
    }
    exports.jsonStringify = jsonStringify;
    var DeserializeCache = function() {
      function DeserializeCache2() {
        this.cachedModels = {};
      }
      DeserializeCache2.prototype.getCachedModel = function(data, resourceIdObject) {
        var entityKey = this.createCacheKey(data, resourceIdObject);
        return this.cachedModels[entityKey] || null;
      };
      DeserializeCache2.prototype.handleModel = function(model, data, resourceIdObject) {
        var entityKey = this.createCacheKey(data, resourceIdObject);
        var dataWithPayload = data.attributes || data.relationships;
        if (entityKey && dataWithPayload) {
          this.cachedModels[entityKey] = model;
        }
      };
      DeserializeCache2.prototype.createCacheKey = function(data, resourceIdObject) {
        if (!data.id || !data.type) {
          return;
        }
        var resourcePart = resourceIdObject ? "".concat(resourceIdObject.type, "-").concat(resourceIdObject.id) : "";
        if (resourceIdObject === null || resourceIdObject === void 0 ? void 0 : resourceIdObject.meta) {
          resourcePart += "-".concat(jsonStringify(resourceIdObject.meta));
        }
        if (data.meta) {
          return "".concat(data.type, "-").concat(data.id, "-").concat(jsonStringify(data.meta), "-").concat(resourcePart);
        }
        return "".concat(data.type, "-").concat(data.id, "-").concat(resourcePart);
      };
      return DeserializeCache2;
    }();
    exports.DeserializeCache = DeserializeCache;
  }
});

// node_modules/jsona/lib/Jsona.js
var require_Jsona = __commonJS({
  "node_modules/jsona/lib/Jsona.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils_1 = require_utils();
    var ModelsSerializer_1 = require_ModelsSerializer();
    var JsonDeserializer_1 = require_JsonDeserializer();
    var ReduxObjectDenormalizer_1 = require_ReduxObjectDenormalizer();
    var simplePropertyMappers_1 = require_simplePropertyMappers();
    var cache_1 = require_cache();
    var Jsona = function() {
      function Jsona2(params) {
        this.modelPropertiesMapper = new simplePropertyMappers_1.ModelPropertiesMapper();
        this.jsonPropertiesMapper = new simplePropertyMappers_1.JsonPropertiesMapper();
        this.DeserializeCache = cache_1.DeserializeCache;
        this.ModelsSerializer = ModelsSerializer_1.default;
        this.JsonDeserializer = JsonDeserializer_1.default;
        if (params && params.modelPropertiesMapper) {
          this.modelPropertiesMapper = params.modelPropertiesMapper;
        }
        if (params && params.jsonPropertiesMapper) {
          this.jsonPropertiesMapper = params.jsonPropertiesMapper;
        }
        if (params && params.DeserializeCache) {
          this.DeserializeCache = params.DeserializeCache;
        }
        if (params && params.ModelsSerializer) {
          this.ModelsSerializer = params.ModelsSerializer;
        }
        if (params && params.JsonDeserializer) {
          this.JsonDeserializer = params.JsonDeserializer;
        }
      }
      Jsona2.prototype.serialize = function(_a) {
        var stuff = _a.stuff, includeNames = _a.includeNames;
        if (!stuff) {
          throw new Error("Jsona can not serialize, stuff is not passed");
        }
        var jsonBuilder = new this.ModelsSerializer(this.modelPropertiesMapper);
        jsonBuilder.setStuff(stuff);
        if (includeNames) {
          jsonBuilder.setIncludeNames(includeNames);
        }
        return jsonBuilder.build();
      };
      Jsona2.prototype.deserialize = function(body, options) {
        if (!body) {
          throw new Error("Jsona can not deserialize, body is not passed");
        }
        var deserializeCache = new this.DeserializeCache();
        var modelBuilder = new this.JsonDeserializer(this.jsonPropertiesMapper, deserializeCache, options);
        if (typeof body === "string") {
          modelBuilder.setJsonParsedObject((0, utils_1.jsonParse)(body));
        } else {
          modelBuilder.setJsonParsedObject(body);
        }
        return modelBuilder.build();
      };
      Jsona2.prototype.denormalizeReduxObject = function(_a) {
        var reduxObject = _a.reduxObject, entityType = _a.entityType, entityIds = _a.entityIds, _b = _a.returnBuilderInRelations, returnBuilderInRelations = _b === void 0 ? false : _b;
        if (!reduxObject) {
          throw new Error("Jsona can not denormalize ReduxObject, incorrect reduxObject passed");
        }
        if (!entityType) {
          throw new Error("Jsona can not denormalize ReduxObject, entityType is not passed");
        }
        if (!reduxObject[entityType]) {
          return null;
        }
        var modelBuilder = new ReduxObjectDenormalizer_1.default(this.jsonPropertiesMapper);
        modelBuilder.setReduxObject(reduxObject);
        modelBuilder.setEntityType(entityType);
        modelBuilder.setReturnBuilderInRelations(returnBuilderInRelations);
        if (entityIds) {
          modelBuilder.setEntityIds(Array.isArray(entityIds) ? entityIds : entityIds.toString());
        }
        return modelBuilder.build();
      };
      return Jsona2;
    }();
    exports.default = Jsona;
  }
});

// node_modules/jsona/lib/switchCasePropertyMappers.js
var require_switchCasePropertyMappers = __commonJS({
  "node_modules/jsona/lib/switchCasePropertyMappers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SwitchCaseJsonMapper = exports.SwitchCaseModelMapper = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var simplePropertyMappers_1 = require_simplePropertyMappers();
    var utils_1 = require_utils();
    var SwitchCaseModelMapper = function(_super) {
      tslib_1.__extends(SwitchCaseModelMapper2, _super);
      function SwitchCaseModelMapper2(options) {
        var _this = _super.call(this) || this;
        var _a = options || {}, _b = _a.switchAttributes, switchAttributes = _b === void 0 ? true : _b, _c = _a.switchRelationships, switchRelationships = _c === void 0 ? true : _c, _d = _a.switchType, switchType = _d === void 0 ? true : _d, _e = _a.switchChar, switchChar = _e === void 0 ? "-" : _e;
        _this.switchAttributes = switchAttributes;
        _this.switchRelationships = switchRelationships;
        _this.switchType = switchType;
        _this.switchChar = switchChar;
        _this.regex = new RegExp(/([a-z][A-Z0-9])/g);
        return _this;
      }
      SwitchCaseModelMapper2.prototype.getType = function(model) {
        var type = _super.prototype.getType.call(this, model);
        if (!this.switchType || !type) {
          return type;
        }
        return this.convertFromCamelCaseString(type);
      };
      SwitchCaseModelMapper2.prototype.getAttributes = function(model) {
        var camelCasedAttributes = _super.prototype.getAttributes.call(this, model);
        if (!this.switchAttributes || !camelCasedAttributes) {
          return camelCasedAttributes;
        }
        return this.convertFromCamelCase(camelCasedAttributes);
      };
      SwitchCaseModelMapper2.prototype.getRelationships = function(model) {
        var camelCasedRelationships = _super.prototype.getRelationships.call(this, model);
        if (!this.switchRelationships || !camelCasedRelationships) {
          return camelCasedRelationships;
        }
        return this.convertFromCamelCase(camelCasedRelationships);
      };
      SwitchCaseModelMapper2.prototype.convertFromCamelCase = function(stuff) {
        var _this = this;
        if (Array.isArray(stuff)) {
          return stuff.map(function(item) {
            return _this.convertFromCamelCase(item);
          });
        }
        if ((0, utils_1.isPlainObject)(stuff)) {
          var converted_1 = {};
          Object.entries(stuff).forEach(function(_a) {
            var propName = _a[0], value = _a[1];
            var kebabName = _this.convertFromCamelCaseString(propName);
            converted_1[kebabName] = _this.convertFromCamelCase(value);
          });
          return converted_1;
        }
        return stuff;
      };
      SwitchCaseModelMapper2.prototype.convertFromCamelCaseString = function(camelCaseString) {
        var _this = this;
        return camelCaseString.replace(this.regex, function(g) {
          return g[0] + _this.switchChar + g[1].toLowerCase();
        });
      };
      return SwitchCaseModelMapper2;
    }(simplePropertyMappers_1.ModelPropertiesMapper);
    exports.SwitchCaseModelMapper = SwitchCaseModelMapper;
    var SwitchCaseJsonMapper = function(_super) {
      tslib_1.__extends(SwitchCaseJsonMapper2, _super);
      function SwitchCaseJsonMapper2(options) {
        var _this = _super.call(this) || this;
        var _a = options || {}, _b = _a.camelizeAttributes, camelizeAttributes = _b === void 0 ? true : _b, _c = _a.camelizeRelationships, camelizeRelationships = _c === void 0 ? true : _c, _d = _a.camelizeType, camelizeType = _d === void 0 ? true : _d, _e = _a.camelizeMeta, camelizeMeta = _e === void 0 ? false : _e, _f = _a.switchChar, switchChar = _f === void 0 ? "-" : _f;
        _this.camelizeAttributes = camelizeAttributes;
        _this.camelizeRelationships = camelizeRelationships;
        _this.camelizeType = camelizeType;
        _this.camelizeMeta = camelizeMeta;
        _this.switchChar = switchChar;
        _this.regex = new RegExp("".concat(_this.switchChar, "([a-z0-9])"), "g");
        return _this;
      }
      SwitchCaseJsonMapper2.prototype.createModel = function(type) {
        if (!this.camelizeType) {
          return { type };
        }
        var camelizedType = this.convertToCamelCaseString(type);
        return { type: camelizedType };
      };
      SwitchCaseJsonMapper2.prototype.setAttributes = function(model, attributes) {
        if (!this.camelizeAttributes) {
          return _super.prototype.setAttributes.call(this, model, attributes);
        }
        Object.assign(model, this.convertToCamelCase(attributes));
      };
      SwitchCaseJsonMapper2.prototype.setMeta = function(model, meta) {
        if (!this.camelizeMeta) {
          return _super.prototype.setMeta.call(this, model, meta);
        }
        model.meta = this.convertToCamelCase(meta);
      };
      SwitchCaseJsonMapper2.prototype.setRelationships = function(model, relationships) {
        var _this = this;
        _super.prototype.setRelationships.call(this, model, relationships);
        if (!this.camelizeRelationships) {
          return;
        }
        model[simplePropertyMappers_1.RELATIONSHIP_NAMES_PROP].forEach(function(kebabName, i) {
          var camelName = _this.convertToCamelCaseString(kebabName);
          if (camelName !== kebabName) {
            model[camelName] = model[kebabName];
            delete model[kebabName];
            model[simplePropertyMappers_1.RELATIONSHIP_NAMES_PROP][i] = camelName;
          }
        });
      };
      SwitchCaseJsonMapper2.prototype.convertToCamelCase = function(stuff) {
        var _this = this;
        if (Array.isArray(stuff)) {
          return stuff.map(function(item) {
            return _this.convertToCamelCase(item);
          });
        }
        if ((0, utils_1.isPlainObject)(stuff)) {
          var converted_2 = {};
          Object.entries(stuff).forEach(function(_a) {
            var propName = _a[0], value = _a[1];
            var camelName = _this.convertToCamelCaseString(propName);
            converted_2[camelName] = _this.convertToCamelCase(value);
          });
          return converted_2;
        }
        return stuff;
      };
      SwitchCaseJsonMapper2.prototype.convertToCamelCaseString = function(notCamelCaseString) {
        return notCamelCaseString.replace(this.regex, function(g) {
          return g[1].toUpperCase();
        });
      };
      return SwitchCaseJsonMapper2;
    }(simplePropertyMappers_1.JsonPropertiesMapper);
    exports.SwitchCaseJsonMapper = SwitchCaseJsonMapper;
  }
});

// node_modules/jsona/lib/index.js
var require_lib = __commonJS({
  "node_modules/jsona/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SwitchCaseJsonMapper = exports.SwitchCaseModelMapper = exports.JsonPropertiesMapper = exports.ModelPropertiesMapper = exports.JsonDeserializer = exports.ModelsSerializer = exports.Jsona = void 0;
    var Jsona_1 = require_Jsona();
    exports.Jsona = Jsona_1.default;
    var ModelsSerializer_1 = require_ModelsSerializer();
    exports.ModelsSerializer = ModelsSerializer_1.default;
    var JsonDeserializer_1 = require_JsonDeserializer();
    exports.JsonDeserializer = JsonDeserializer_1.default;
    var simplePropertyMappers_1 = require_simplePropertyMappers();
    Object.defineProperty(exports, "ModelPropertiesMapper", { enumerable: true, get: function() {
      return simplePropertyMappers_1.ModelPropertiesMapper;
    } });
    Object.defineProperty(exports, "JsonPropertiesMapper", { enumerable: true, get: function() {
      return simplePropertyMappers_1.JsonPropertiesMapper;
    } });
    var switchCasePropertyMappers_1 = require_switchCasePropertyMappers();
    Object.defineProperty(exports, "SwitchCaseModelMapper", { enumerable: true, get: function() {
      return switchCasePropertyMappers_1.SwitchCaseModelMapper;
    } });
    Object.defineProperty(exports, "SwitchCaseJsonMapper", { enumerable: true, get: function() {
      return switchCasePropertyMappers_1.SwitchCaseJsonMapper;
    } });
    exports.default = Jsona_1.default;
  }
});
export default require_lib();
//# sourceMappingURL=jsona.js.map
